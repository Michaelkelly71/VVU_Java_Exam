/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author HP
 */
import java.sql.*;
import javax.swing.JOptionPane;

/**
 * GPA Calculator Application
 * @author HP
 */
public class calculator extends javax.swing.JFrame {

    /**
     * Creates new form GpaCalculator
     */
    public calculator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jform = new javax.swing.JPanel();
        javax.swing.JLabel tfgpa = new javax.swing.JLabel();
        jselect = new javax.swing.JComboBox<>();
        javax.swing.JLabel jfill = new javax.swing.JLabel();
        jcalculate = new javax.swing.JButton();
        jstudents = new javax.swing.JLabel();
        jid = new javax.swing.JLabel();
        jcourses = new javax.swing.JLabel();
        jhours = new javax.swing.JLabel();
        jgrades = new javax.swing.JLabel();
        tfid = new javax.swing.JScrollPane();
        jId = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tfstudents = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        tfcourses = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        tfhours = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        tfgrades = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tfgpa.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        tfgpa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tfgpa.setText("GPA Calculator");

        jselect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select ", "File", "Database", " " }));

        jfill.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jfill.setText("Please Fill the table with your details");

        jcalculate.setForeground(new java.awt.Color(204, 0, 51));
        jcalculate.setText("Calculate GPA");
        jcalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcalculateActionPerformed(evt);
            }
        });

        jstudents.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jstudents.setForeground(new java.awt.Color(0, 153, 255));
        jstudents.setText("Students Name:");

        jid.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jid.setForeground(new java.awt.Color(0, 153, 255));
        jid.setText("ID:");

        jcourses.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jcourses.setForeground(new java.awt.Color(0, 153, 255));
        jcourses.setText("Courses:");

        jhours.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jhours.setForeground(new java.awt.Color(0, 153, 255));
        jhours.setText("Credit Hours:");

        jgrades.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jgrades.setForeground(new java.awt.Color(0, 153, 255));
        jgrades.setText("Grades:");

        jId.setColumns(20);
        jId.setRows(5);
        tfid.setViewportView(jId);

        tfstudents.setColumns(20);
        tfstudents.setRows(5);
        jScrollPane2.setViewportView(tfstudents);

        tfcourses.setColumns(20);
        tfcourses.setRows(5);
        jScrollPane3.setViewportView(tfcourses);

        tfhours.setColumns(20);
        tfhours.setRows(5);
        jScrollPane4.setViewportView(tfhours);

        tfgrades.setColumns(20);
        tfgrades.setRows(5);
        jScrollPane5.setViewportView(tfgrades);

        javax.swing.GroupLayout jformLayout = new javax.swing.GroupLayout(jform);
        jform.setLayout(jformLayout);
        jformLayout.setHorizontalGroup(
            jformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jformLayout.createSequentialGroup()
                .addGroup(jformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jformLayout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(jformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jid)
                            .addComponent(jstudents)
                            .addComponent(jcourses)
                            .addComponent(jhours)
                            .addComponent(jgrades))
                        .addGap(27, 27, 27)
                        .addGroup(jformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfid)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane5)))
                    .addGroup(jformLayout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(jselect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(297, 297, 297)
                        .addComponent(jcalculate))
                    .addGroup(jformLayout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(jfill))
                    .addGroup(jformLayout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addComponent(tfgpa, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(246, Short.MAX_VALUE))
        );
        jformLayout.setVerticalGroup(
            jformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jformLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(tfgpa, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jfill)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jformLayout.createSequentialGroup()
                        .addComponent(jstudents)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jid))
                    .addGroup(jformLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addComponent(tfid, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcourses)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jhours)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jgrades))
                .addGap(58, 58, 58)
                .addGroup(jformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jselect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcalculate))
                .addGap(266, 266, 266))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(337, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 16, Short.MAX_VALUE)
                .addComponent(jform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>                        

    private void jcalculateActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // Get database connection
        Dbconnection dbConnection = new Dbconnection();
        Connection conn = dbConnection.getDatabase();
        
        if (conn == null) {
            JOptionPane.showMessageDialog(this, "Failed to connect to database", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get user input from form
        String studentName = tfstudents.getText();
        String studentId = jId.getText();
        String courses = tfcourses.getText();
        String creditHoursText = tfhours.getText();
        String gradesText = tfgrades.getText();
        
        // Validate input
        if (studentName.isEmpty() || studentId.isEmpty() || courses.isEmpty() || 
            creditHoursText.isEmpty() || gradesText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        try {
            // Parse credit hours and grades
            double creditHours = Double.parseDouble(creditHoursText);
            String grades = gradesText.toUpperCase();
            
            // Calculate GPA
            double gpa = calculateGPA(grades, creditHours);
            
            // Save data to database
            boolean saveSuccess = saveToDatabase(conn, studentName, studentId, courses, creditHoursText, gradesText, gpa);
            
            if (saveSuccess) {
                JOptionPane.showMessageDialog(this, "Your GPA is " + gpa, "GPA Result", JOptionPane.INFORMATION_MESSAGE);
                
                // Clear form fields
                tfstudents.setText("");
                jId.setText("");
                tfcourses.setText("");
                tfhours.setText("");
                tfgrades.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Failed to save data to database", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Credit hours must be a number", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } finally {
            // Close connection
            try {
                if (conn != null && !conn.isClosed()) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }                                          
    
    /**
     * Calculate GPA based on grades and credit hours
     * @param grades Letter grades
     * @param creditHours Credit hours
     * @return GPA value
     */
    private double calculateGPA(String grades, double creditHours) {
        // Simple GPA calculation based on standard scale
        // A = 4.0, B = 3.0, C = 2.0, D = 1.0, F = 0.0
        double gradePoints = 0.0;
        
        switch (grades) {
            case "A":
                gradePoints = 4.0;
                break;
            case "B":
                gradePoints = 3.0;
                break;
            case "C":
                gradePoints = 2.0;
                break;
            case "D":
                gradePoints = 1.0;
                break;
            case "F":
                gradePoints = 0.0;
                break;
            default:
                gradePoints = 0.0;
                break;
        }
        
        return gradePoints; // This is a simple calculation, can be enhanced
    }
    
    /**
     * Save student data to database
     * @param conn Database connection
     * @param studentName Student name
     * @param studentId Student ID
     * @param courses Course names
     * @param creditHours Credit hours
     * @param grades Student grades
     * @param gpa Calculated GPA
     * @return Success or failure
     */
    private boolean saveToDatabase(Connection conn, String studentName, String studentId, 
                                  String courses, String creditHours, String grades, double gpa) {
        // Check if the users table exists, create if it doesn't
        createTableIfNotExists(conn);
        
        // SQL query to insert data
        String query = "INSERT INTO users (student_name, student_id, courses, credit_hours, grades, gpa) VALUES (?, ?, ?, ?, ?, ?)";
        
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, studentName);
            stmt.setString(2, studentId);
            stmt.setString(3, courses);
            stmt.setString(4, creditHours);
            stmt.setString(5, grades);
            stmt.setDouble(6, gpa);
            
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
            
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * Create users table if it doesn't exist
     * @param conn Database connection
     */
    private void createTableIfNotExists(Connection conn) {
        String createTableSQL = "CREATE TABLE IF NOT EXISTS users (" +
                "id INT AUTO_INCREMENT PRIMARY KEY, " +
                "student_name VARCHAR(100) NOT NULL, " +
                "student_id VARCHAR(50) NOT NULL, " +
                "courses VARCHAR(255) NOT NULL, " +
                "credit_hours VARCHAR(50) NOT NULL, " +
                "grades VARCHAR(50) NOT NULL, " +
                "gpa DOUBLE NOT NULL)";
        
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(createTableSQL);
            System.out.println("Table created or already exists");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GpaCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GpaCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GpaCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GpaCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GpaCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextArea jId;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton jcalculate;
    private javax.swing.JLabel jcourses;
    private javax.swing.JPanel jform;
    private javax.swing.JLabel jgrades;
    private javax.swing.JLabel jhours;
    private javax.swing.JLabel jid;
    private javax.swing.JComboBox<String> jselect;
    private javax.swing.JLabel jstudents;
    private javax.swing.JTextArea tfcourses;
    private javax.swing.JTextArea tfgrades;
    private javax.swing.JTextArea tfhours;
    private javax.swing.JScrollPane tfid;
    private javax.swing.JTextArea tfstudents;
    // End of variables declaration                   
}